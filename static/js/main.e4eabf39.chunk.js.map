{"version":3,"sources":["components/Card.js","components/CardList.js","components/SearchBox.js","components/Scroll.js","App.js","serviceWorker.js","index.js"],"names":["Card","_ref","name","model","manufacturer","cost","starshipClass","react_default","a","createElement","className","CardList","starships","map","starship","i","components_Card","key","cost_in_credits","starship_class","SearchBox","searchfield","searchChange","type","placeholder","onChange","Scroll","props","style","overflowY","border","height","children","App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onSearchChange","event","setState","searchField","target","value","console","log","state","_this2","urls","Promise","all","url","fetch","then","resp","json","array","length","item","results","reduce","sum","cur","concat","_this$state","filteredStarShips","filter","toLowerCase","includes","components_SearchBox","components_Scroll","components_CardList","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.e4eabf39.chunk.js","sourcesContent":["import React from 'react';\r\n\r\nconst Card = ({name,model,manufacturer,cost,starshipClass}) => {\r\n    return (\r\n        <div className=\"tc fw8 black-90 bg-white-20 dib br3 pa3 ma2 grow bw2 shadow-5\">\r\n            <h2>Name: {name}</h2>\r\n            <p>Model: {model}</p>\r\n            <p>Manufacturer: {manufacturer}</p>\r\n            <p>Cost: {cost}</p>\r\n            <p>StarShip Class: {starshipClass}</p>\r\n        </div>\r\n    )\r\n};\r\n\r\nexport default Card;","import React from 'react';\r\nimport Card from './Card';\r\n\r\nconst CardList = ({starships}) => {\r\n\treturn (\r\n\t\t<div>\r\n            {\r\n            \tstarships.map((starship,i)=>{\r\n            \t\treturn (\r\n            \t\t\t<Card \r\n            \t\t\t\tkey={i}\r\n            \t\t\t\tname={starships[i].name}\r\n            \t\t\t\tmodel={starships[i].model}\r\n            \t\t\t\tmanufacturer={starships[i].manufacturer}\r\n            \t\t\t\tcost={starships[i].cost_in_credits}\r\n            \t\t\t\tstarshipClass={starships[i].starship_class}\r\n            \t\t\t/>\r\n            \t\t);\r\n            \t})\r\n            }\r\n    \t</div>\r\n\t);\r\n}\r\n\r\nexport default CardList;","import React from 'react';\r\n\r\nconst SearchBox = ({searchfield, searchChange}) => {\r\n\treturn (\r\n\t\t<div className='pa2'>\r\n\t\t\t<input \r\n\t\t\t\tclassName='pa3 ba b--green'\r\n\t\t\t\ttype='search' \r\n\t\t\t\tplaceholder='Search Starships'\r\n\t\t\t\tonChange={searchChange}\r\n\t\t\t/>\r\n\t\t</div>\r\n\t);\r\n}\r\n\r\nexport default SearchBox;","import React from 'react';\r\n\r\nconst Scroll = (props) => {\r\n\treturn (\r\n\t\t<div style={{overflowY: 'scroll', border: '2px solid black', height: '500px'}}>\r\n\t\t\t{props.children}\r\n\t\t</div>\r\n\t)\r\n};\r\n\r\nexport default Scroll;","import React, { Component } from 'react';\r\nimport './App.css'\r\nimport CardList from './components/CardList';\r\nimport SearchBox from './components/SearchBox';\r\nimport Scroll from './components/Scroll';\r\n\r\nclass App extends Component {\r\n\tconstructor() {\r\n\t\tsuper()\r\n\t\tthis.state = {\r\n\t\t\tstarships: [],\r\n\t\t\tsearchField: ''\r\n\t\t}\r\n\t}\r\n\r\n\tcomponentDidMount() {\r\n\r\n\t\tconst urls = [\r\n\t\t\t'https://swapi.co/api/starships/?page=1',\r\n\t\t\t'https://swapi.co/api/starships/?page=2',\r\n\t\t\t'https://swapi.co/api/starships/?page=3',\r\n\t\t\t'https://swapi.co/api/starships/?page=4'\r\n\t\t]\r\n\r\n\t\t\r\n\r\n\t\tPromise.all(urls.map(url=>{\r\n\t\t\treturn fetch(url).then(resp=>resp.json())\r\n\t\t})).then(array=>{\r\n\t\t\tfor(let i =0;i<urls.length;i++){\r\n\t\t\t\tthis.setState({starships: array.map(item => item.results).reduce((sum, cur) => sum.concat(cur), []) })\r\n\t\t\t\tconsole.log(array[i].results);\r\n\t\t\t}\r\n\t\t})\r\n\r\n\t\t// fetch('https://swapi.co/api/starships/10/')\r\n\t\t//   .then(response=> response.json())\r\n\t\t//   .then(starships=> this.setState({starships: starships}))\r\n\t\t\r\n\t\t// .catch(error => \r\n\t\t// \tconsole.log('Error during fetching of starships:', error)\r\n\t\t// );\r\n\t}\r\n\r\n\tonSearchChange = (event) => {\r\n\t\tthis.setState({ searchField: event.target.value })\r\n\t\tconsole.log(event.target.value);\r\n\t}\r\n\r\n\trender() {\r\n\r\n\t\tconst { starships, searchField } = this.state;\r\n\t\tconst filteredStarShips = starships.filter(starship=>{\r\n\t\t\treturn starship.name.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t\t|| starship.manufacturer.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t\t\t|| starship.starship_class.toLowerCase().includes(searchField.toLowerCase())\r\n\t\t})\r\n\r\n\t\treturn !starships.length ? \r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t<h1 className='loadingBar'>Loading</h1>\r\n\t\t\t\t</div>\r\n\t\t\t) :\r\n\t\t\t(\r\n\t\t\t\t<div className='tc'>\r\n\t\t\t\t\t\t<h1 className='f1'>STAR WARS STARSHIPS</h1>\r\n\t\t\t\t\t\t<SearchBox searchChange={this.onSearchChange}/>\r\n\t\t\t\t\t\t<Scroll>\r\n\t\t\t\t\t\t\t<CardList starships={filteredStarShips} />\r\n\t\t\t\t\t\t</Scroll>\r\n\t\t\t\t</div>\r\n\t\t\t);\r\n\t}\r\n}\r\n\r\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'tachyons';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}